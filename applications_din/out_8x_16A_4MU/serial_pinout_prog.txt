Pin Belegung shift-out:

IO 0:	serial data 	BOT PCB	 	LED/Taster 1
IO 1:	serial data 	mid PCB		LED/Taster 2
IO 2:	BYTE Übernahme 	beide		LED/Taster 3
IO 3:	shift clock	beide		LED/Taster 4
IO4-7:	NC				LED/Taster 5-8
PWM: 	output enable	beide


Byte BOT PCB:

Bit 0:	set	K2	A4
Bit 1:	reset	K2

Bit 2:	set	K1	A2
Bit 3:	reset	K1

Bit 4:	set	K4	A7
Bit 5:	reset	K4

Bit 6:	set	K3	A5
Bit 7:	reset	K3



Byte mid PCB:

Bit 0:	set	K3	A6
Bit 1:	reset	K3

Bit 2:	set	K4	A8
Bit 3:	reset	K4

Bit 4:	set	K1	A1
Bit 5:	reset	K1

Bit 6:	set	K2	A3
Bit 7:	reset	K2

mid lByte: A2 A2 A0 A0 A7 A7 A5 A5	bot hByte: A4 A4 A6 A6 A1 A1 A3 A3


const[outpattern0-7]( 0x1000,0x0004,0x4000,0x0001,0x0040,0x0100,0x0010,0x0400)

ausserhalb {} damit global wird.
von links nach rechts entspricht bit 0-7 vom ehemaligen P0

bei reset <<1 noch

lg
oldi





Hier ist mal die zu Fuß Lösung. PWM ist extra geblieben der muss dann per Timer wieder zurückgesetzt werden.

Ich mach das zur Zeit ohne Timer. Ich setze ne var auf 4 und lass die in der delay_timer runterzählen und wenn 0 dann PWM zurücksetzen.
(hatte keinen Bock mit dem Timer zu experimentieren und so ist er ja für andere sachen frei)


Aufruf mit:

void port_schalten(void){

   bla bla bla

   spi_2_out(sort_output(portbuffer));
   PWM=0;

   bla bla bla
}



#define CLK		P0_3
#define BOT_OUT		P0_0
#define MID_OUT		P0_1
#define WRITE		P0_2




unsigned int sort_output(unsigned char portbuffer){

   unsigned int result;

   
   // A1 
   if(portbuffer & 0x01){
      result|=0x1000
   }
   else{
      result|=0x2000
   }

   // A2
   if(portbuffer & 0x02){
      result|=0x0004
   }
   else{
      result|=0x0008
   }

   // A3
   if(portbuffer & 0x04){
      result|=0x4000
   }
   else{
      result|=0x8000
   }

   // A4
   if(portbuffer & 0x08){
      result|=0x0001
   }
   else{
      result|=0x0002
   }

   // A5
   if(portbuffer & 0x10){
      result|=0x0040
   }
   else{
      result|=0x0080
   }

   // A6
   if(portbuffer & 0x20){
      result|=0x0100
   }
   else{
      result|=0x0200
   }

   // A7
   if(portbuffer & 0x40){
      result|=0x0010
   }
   else{
      result|=0x0020
   }

   // A8
   if(portbuffer & 0x80){
      result|=0x0400
   }
   else{
      result|=0x0800
   }

   return result;

}



void spi_2_out(unsigned int daten){

   unsigned char n, unten, mitte;

   unten=daten & 0xFF;
   mitte=daten>>8;

   WRITE=0;
   CLK=0;
   for(n=0;n<=7;n++){
      

      BOT_OUT=(unten & 0x080)>>7;
      unten<<=1;
      
      MID_OUT=(mitte & 0x080)>>7;
      mitte<<=1;

      CLK=1;
      CLK=0;

   }

   WRITE=1;

   WRITE=0;

}















